
from sentence_transformers import SentenceTransformer, util
import requests
from bs4 import BeautifulSoup
import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext
from docx import Document
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
import os
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

# --- H√†m l·∫•y vƒÉn b·∫£n ch√≠nh t·ª´ m·ªôt URL (t√¨m t·∫•t c·∫£ th·∫ª <p>) ---
def fetch_text_from_url(url):
    try:
        response = requests.get(url)
        response.encoding = response.apparent_encoding
        if response.status_code != 200:
            return ""
        soup = BeautifulSoup(response.content, "html.parser")
        paragraphs = soup.find_all("p")
        text = "\n".join(p.get_text() for p in paragraphs)
        return text.strip()
    except Exception as e:
        print(f"L·ªói khi l·∫•y URL: {e}")
        return ""

# --- H√†m chia vƒÉn b·∫£n th√†nh c√°c c√¢u d·ª±a tr√™n d·∫•u c√¢u . ? ! ---
def split_into_sentences(text):
    import re
    sentences = re.split(r'(?<=[\.\?\!])\s+', text.strip())
    return [s for s in sentences if s]

# --- Kh·ªüi t·∫°o m√¥ h√¨nh SBERT ---
model = SentenceTransformer('all-MiniLM-L6-v2')

# --- Bi·∫øn l∆∞u k·∫øt qu·∫£ v√† ph·∫ßn nghi ng·ªù ---
last_result = None
suspicious_parts = []

# --- H√†m ki·ªÉm tra ƒë·∫°o vƒÉn ---
def check_plagiarism():
    global last_result

    user_text = input_box.get("1.0", tk.END).strip()
    url = url_entry.get().strip()
    if not user_text or not url:
        result_label.config(text="Vui l√≤ng nh·∫≠p vƒÉn b·∫£n v√† URL ngu·ªìn.")
        return
    
    # L·∫•y n·ªôi dung t·ª´ URL
    source_text = fetch_text_from_url(url)
    if not source_text:
        result_label.config(text="Kh√¥ng th·ªÉ t·∫£i vƒÉn b·∫£n t·ª´ URL.")
        return

    # T√≠nh embedding to√†n vƒÉn b·∫£n v√† cosine similarity
    embedding = model.encode([user_text, source_text])
    cos_sim = util.cos_sim(embedding[0], embedding[1])[0][0]
    similarity_percent = float(cos_sim) * 100
    result_label.config(text=f"ƒê·ªô t∆∞∆°ng t·ª±: {similarity_percent:.2f}%")

    # L∆∞u k·∫øt qu·∫£ ƒë·ªÉ xu·∫•t b√°o c√°o
    last_result = {
        "url": url,
        "input_text": user_text,
        "similarity": round(similarity_percent, 2)
    }

    # X√≥a highlight c≈©
    input_box.tag_remove("highlight", "1.0", tk.END)
    
    # T√°ch c√¢u v√† t√≠nh embedding t·ª´ng c√¢u ƒë·ªÉ highlight
    user_sentences = split_into_sentences(user_text)
    source_sentences = split_into_sentences(source_text)
    user_emb = model.encode(user_sentences)
    source_emb = model.encode(source_sentences)
    threshold = 0.8  # Ng∆∞·ª°ng nghi ng·ªù
    suspicious_parts.clear()

    for i, sent in enumerate(user_sentences):
        if not sent.strip():
            continue
        cos_scores = util.cos_sim(user_emb[i], source_emb)[0]
        max_score = cos_scores.max().item()
        if max_score >= threshold:
            suspicious_parts.append(sent)
            pos = user_text.find(sent)
            if pos != -1:
                start_idx = f"1.0+{pos}c"
                end_idx = f"1.0+{pos+len(sent)}c"
                input_box.tag_add("highlight", start_idx, end_idx)
    
    # C·∫•u h√¨nh m√†u highlight
    input_box.tag_config("highlight", background="yellow")

# --- Xu·∫•t b√°o c√°o PDF ---

# --- Xu·∫•t b√°o c√°o PDF ---
def export_pdf():
    if not last_result:
        messagebox.showwarning("Ch∆∞a c√≥ d·ªØ li·ªáu", "H√£y ki·ªÉm tra ƒë·∫°o vƒÉn tr∆∞·ªõc.")
        return

    # Try to register a TTF font that supports Unicode (Vietnamese)
    def _register_font():
        candidates = [
            "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf",
            "/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf",
            "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf",
            "/Library/Fonts/DejaVuSans.ttf",
            "/Library/Fonts/Arial Unicode.ttf",
            "/System/Library/Fonts/Supplemental/Arial Unicode.ttf",
            "/System/Library/Fonts/Supplemental/DejaVuSans.ttf",
            "/System/Library/Fonts/Arial.ttf",
            "/Library/Fonts/Times New Roman.ttf",
        ]
        for p in candidates:
            if os.path.exists(p):
                try:
                    pdfmetrics.registerFont(TTFont("AppFont", p))
                    return "AppFont"
                except Exception:
                    continue
        return None

    pdf = canvas.Canvas("KetQua_DaoVan.pdf", pagesize=A4)

    font_name = _register_font()

    # helper to ensure we don't pass unsupported unicode to builtin fonts
    def _safe_text(s, use_font):
        if use_font:
            return s
        try:
            return s.encode('latin-1', 'replace').decode('latin-1')
        except Exception:
            return s.encode('ascii', 'ignore').decode('ascii')
    
    if font_name:
        pdf.setFont(font_name, 12)
    else:
        # fallback to default (may not render Vietnamese); inform the user
        pdf.setFont("Helvetica", 12)
        messagebox.showwarning("Font", "Kh√¥ng t√¨m th·∫•y font Unicode tr√™n h·ªá th·ªëng. PDF c√≥ th·ªÉ kh√¥ng hi·ªÉn th·ªã ti·∫øng Vi·ªát ƒë√∫ng. Vui l√≤ng c√†i DejaVuSans ho·∫∑c Noto Sans.")

    pdf.drawString(100, 800, _safe_text("B√ÅO C√ÅO KI·ªÇM TRA ƒê·∫†O VƒÇN", bool(font_name)))
    pdf.drawString(100, 770, _safe_text(f"URL g·ªëc: {last_result['url']}", bool(font_name)))
    pdf.drawString(100, 740, _safe_text(f"M·ª©c ƒë·ªô t∆∞∆°ng ƒë·ªìng: {last_result['similarity']}%", bool(font_name)))

    text_object = pdf.beginText(40, 700)
    if font_name:
        text_object.setFont(font_name, 12)
    else:
        text_object.setFont("Helvetica", 12)
    # split long text into lines for safety
    for line in ("VƒÉn b·∫£n ki·ªÉm tra:",) + tuple(last_result['input_text'].splitlines()):
        text_object.textLine(_safe_text(line, bool(font_name)))
    pdf.drawText(text_object)
    pdf.save()

    messagebox.showinfo("Xu·∫•t PDF", "ƒê√£ l∆∞u file KetQua_DaoVan.pdf th√†nh c√¥ng!")
def export_word():
    if not last_result:
        messagebox.showwarning("Ch∆∞a c√≥ d·ªØ li·ªáu", "H√£y ki·ªÉm tra ƒë·∫°o vƒÉn tr∆∞·ªõc.")
        return

    doc = Document()
    doc.add_heading("B√ÅO C√ÅO KI·ªÇM TRA ƒê·∫†O VƒÇN", 0)
    doc.add_paragraph(f"URL g·ªëc: {last_result['url']}")
    doc.add_paragraph(f"M·ª©c ƒë·ªô t∆∞∆°ng ƒë·ªìng: {last_result['similarity']}%")
    doc.add_paragraph("VƒÉn b·∫£n ki·ªÉm tra:")
    doc.add_paragraph(last_result['input_text'])
    doc.save("KetQua_DaoVan.docx")

    messagebox.showinfo("Xu·∫•t Word", "ƒê√£ l∆∞u file KetQua_DaoVan.docx th√†nh c√¥ng!")

# --- Giao di·ªán ---
root = tk.Tk()
root.title("üß† AI Ph√°t Hi·ªán ƒê·∫°o VƒÉn")
root.geometry("700x650")

tk.Label(root, text="Nh·∫≠p vƒÉn b·∫£n c·∫ßn ki·ªÉm tra:", font=("Arial", 12, "bold")).pack(pady=5)
input_box = scrolledtext.ScrolledText(root, width=80, height=10, wrap=tk.WORD)
input_box.pack(pady=5)

tk.Label(root, text="Nh·∫≠p URL ngu·ªìn ƒë·ªÉ so s√°nh:", font=("Arial", 12, "bold")).pack(pady=5)
url_entry = tk.Entry(root, width=80)
url_entry.pack(pady=5)

tk.Button(root, text="üîé Ki·ªÉm tra ƒë·∫°o vƒÉn", command=check_plagiarism, bg="#4CAF50", fg="white", font=("Arial", 12, "bold")).pack(pady=10)
result_label = tk.Label(root, text="", font=("Arial", 14, "bold"), fg="#d32f2f")
result_label.pack(pady=10)

tk.Button(root, text="üìò Xu·∫•t b√°o c√°o PDF", command=export_pdf, bg="#2196F3", fg="white", font=("Arial", 12)).pack(pady=5)
tk.Button(root, text="üìÑ Xu·∫•t b√°o c√°o Word", command=export_word, bg="#607D8B", fg="white", font=("Arial", 12)).pack(pady=5)

root.mainloop()
